/*
 * 数组为什么从0开始，而不是从1开始？
   数组下标可以理解为offset偏移，a[i] = base_address + i * byte_size
 * 如何实现随机访问？
 */

// 数组： 一种连续线性表数据结构，内存地址连续，存储一组具有相同结构的数据

// JVM标记清除算法：

// 大多数主流虚拟机采用可达性分析算法来判断对象是否存活，在标记阶段，会遍历所有 GC ROOTS，将所有 GC ROOTS 可达的对象标记为存活。只有当标记工作完成后，清理工作才会开始。

// 不足：1.效率问题。标记和清理效率都不高，但是当知道只有少量垃圾产生时会很高效。2.空间问题。会产生不连续的内存空间碎片。

// 二维数组内存寻址：

// 对于 m * n 的数组，a [ i ][ j ] (i < m,j < n)的地址为：

// address = base_address + ( i * n + j) * type_size

// 另外，对于数组访问越界造成无限循环，我理解是编译器的问题，对于不同的编译器，
// 在内存分配时，会按照内存地址递增或递减的方式进行分配。
// 如果是内存地址递减的方式，就会造成无限循环。